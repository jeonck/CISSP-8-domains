export const domain8StudyMaterials = {
  sections: [
    {
      id: 1,
      title: "1. 핵심 개념 정리",
      subsections: [
        {
          id: 1.1,
          title: "1.1 소프트웨어 개발 수명주기(SDLC)",
          content: `
**정의**: 소프트웨어 개발의 체계적 프로세스에 보안을 통합.

**핵심 단계**:
• **계획 및 요구사항 분석**: 보안 요구사항 정의(예: 입력 검증). ISO/IEC 27001(A.14.2.1)
• **설계**: 보안 아키텍처 설계(예: 최소 권한 원칙)
• **코딩**: 안전한 코딩 관행 적용(예: OWASP Secure Coding)
• **테스트**: 보안 테스트(SAST, DAST, 침투 테스트)
• **배포**: 안전한 배포(예: CI/CD에 보안 통합)
• **유지보수**: 패치 및 취약점 관리

**예시**: SQL 인젝션(A03:2021) 방지를 위해 SDLC 전반에 입력 검증 구현

**리스크 연계**: 보안 미통합으로 취약점 악용(예: Equifax, CVE-2017-5638, 약 9천억 원 손실)
          `
        },
        {
          id: 1.2,
          title: "1.2 안전한 코딩 관행",
          content: `
**정의**: 취약점을 줄이기 위한 코딩 표준 및 가이드라인.

**핵심 관행**:
• **입력 검증**: 모든 사용자 입력 검증(예: SQL 인젝션 방지)
• **출력 인코딩**: XSS 방지(예: HTML 엔티티 인코딩)
• **파라미터화 쿼리**: SQL 인젝션 방지
• **종속성 관리**: 취약한 라이브러리 제거(예: OWASP Dependency-Check)

**예시**: 파라미터화 쿼리로 SQL 인젝션(A03:2021) 방지

**리스크 연계**: 부적절한 코딩으로 데이터 유출(예: Log4j, CVE-2021-44228)
          `
        },
        {
          id: 1.3,
          title: "1.3 보안 테스트",
          content: `
**정의**: 소프트웨어 취약점을 식별하기 위한 테스트.

**주요 테스트**:
• **정적 코드 분석(SAST)**: 소스 코드 검사(예: SonarQube). NIST SP 800-218
• **동적 애플리케이션 테스트(DAST)**: 런타임 취약점 테스트(예: OWASP ZAP)
• **침투 테스트**: 실제 공격 시뮬레이션(예: 블랙박스, 화이트박스)
• **퍼징(Fuzzing)**: 비정상 입력으로 취약점 탐지

**예시**: DAST로 SQL 인젝션 취약점 탐지, SAST로 코드 수정

**리스크 연계**: 테스트 부족으로 취약점 미탐지(예: WannaCry, CVE-2017-0144)
          `
        },
        {
          id: 1.4,
          title: "1.4 종속성 관리",
          content: `
**정의**: 소프트웨어 라이브러리 및 종속성의 취약점 관리.

**핵심 도구**:
• **소프트웨어 구성 분석(SCA)**: 취약한 종속성 탐지(예: OWASP Dependency-Check)
• **패치 관리**: 종속성 패치 적용. NIST SP 800-53(SI-2)

**예시**: Log4j 취약점(CVE-2021-44228)을 SCA로 탐지, 패치 적용

**리스크 연계**: 취약한 종속성으로 데이터 유출
          `
        },
        {
          id: 1.5,
          title: "1.5 클라우드 및 API 보안",
          content: `
**정의**: 클라우드 애플리케이션과 API의 보안 설계 및 관리.

**핵심 요소**:
• **API 보안**: 인증 및 인가 강화(예: OAuth, JWT). ISO/IEC 27017
• **종단 간 암호화**: 데이터 전송 및 저장 보호
• **컨테이너 보안**: Docker, Kubernetes 보안 설정

**예시**: API 호출에 OAuth 적용, SQL 인젝션 방지를 위해 입력 검증

**리스크 연계**: API 설정 오류로 데이터 유출(예: S3 버킷 공개)
          `
        },
        {
          id: 1.6,
          title: "1.6 규제 준수",
          content: `
**정의**: 소프트웨어 개발에서 법적·규제적 요구사항 준수.

**주요 규제**:
• **GDPR**: PII 보호, 입력 검증 및 암호화 요구
• **PCI DSS**: 결제 데이터 보호를 위한 보안 코딩
• **ISO/IEC 27018**: 클라우드 애플리케이션 보안

**예시**: GDPR 준수를 위해 PII 처리 시 입력 검증과 암호화 적용

**리스크 연계**: 규제 미준수로 벌금(예: GDPR 위반, 2천만 유로)
          `
        }
      ]
    },
    {
      id: 2,
      title: "2. 주요 표준 및 디팩토",
      content: `
• **ISO/IEC 27001(A.14)**: 시스템 개발 및 유지보수 보안
• **ISO/IEC 27017/27018**: 클라우드 애플리케이션 보안
• **NIST SP 800-53**: 보안 통제(SI-2, CA-8)
• **NIST SP 800-218**: 안전한 소프트웨어 개발 프레임워크
• **OWASP Top 10**: 웹 애플리케이션 취약점(예: A03:2021 Injection)
• **GDPR/PCI DSS**: 데이터 보호 및 개발 요구사항
      `
    },
    {
      id: 3,
      title: "3. 실제 사례",
      content: `
**Equifax(2017)**:
Apache Struts 취약점(CVE-2017-5638)으로 1억 4천만 명 데이터 유출, 약 9천억 원 손실. 패치 관리와 SAST 부족.

**WannaCry(2017)**:
패치되지 않은 취약점(CVE-2017-0144)으로 글로벌 피해, 종속성 관리 미흡.

**Log4j(2021)**:
취약한 종속성(CVE-2021-44228)으로 데이터 유출, SCA와 패치 미적용.

**SQL 인젝션 예시**:
입력 검증 부족으로 High Risk(0.16 × 135.5억 원 = 21.68억 원 손실).
      `
    },
    {
      id: 4,
      title: "4. 학습 팁",
      content: `
• **리스크 계산 연습**: SQL 인젝션 예시로 정성적(High Risk) 및 정량적(21.68억 원) 계산 반복
• **표준 매핑**: ISO/IEC 27001(A.14)과 NIST SP 800-218 통제를 비교 학습
• **시나리오 분석**: Equifax, Log4j 사례를 통해 개발보안 실패와 완화 전략 분석
• **실습**: SAST(SonarQube), DAST(OWASP ZAP), SCA(Dependency-Check) 설정 시뮬레이션
      `
    },
    {
      id: 5,
      title: "5. 결론",
      content: `
Domain 8은 SDLC에 보안을 통합하여 소프트웨어 취약점을 관리하며, 리스크 공식(리스크 = 위협 × 취약점 × 영향)을 적용하여 SQL 인젝션(High Risk, 21.68억 원 손실) 같은 리스크를 평가합니다.

ISO/IEC 27001, NIST SP 800-218 기반으로 SAST, DAST, 입력 검증을 구현해야 합니다.
      `
    }
  ]
}