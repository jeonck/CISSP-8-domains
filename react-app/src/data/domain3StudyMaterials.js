export const domain3StudyMaterials = {
  sections: [
    {
      id: 1,
      title: "1. 핵심 개념 정리",
      subsections: [
        {
          id: 1.1,
          title: "1.1 보안 아키텍처",
          content: `
**정의**: 시스템과 네트워크의 보안을 보장하는 설계 및 구현 프레임워크.

**핵심 원칙**:
• **CIA Triad**: 기밀성(암호화), 무결성(해시), 가용성(이중화)
• **방어 심층(Defense-in-Depth)**: 다중 계층 보안 통제(예: 방화벽, IDS, 암호화). NIST SP 800-53(SC-7)
• **최소 권한(Least Privilege)**: 필요한 최소 권한 부여. ISO/IEC 27001(A.9.1.2)
• **제로 트러스트**: 모든 접근 검증(예: MFA, 지속적 모니터링). NIST SP 800-207

**예시**: SQL 인젝션 방지를 위해 WAF(웹 애플리케이션 방화벽)와 입력 검증을 포함한 아키텍처 설계

**리스크 연계**: 패치되지 않은 취약점(예: Equifax, CVE-2017-5638)은 아키텍처적 결함으로 데이터 유출
          `
        },
        {
          id: 1.2,
          title: "1.2 암호화 기술",
          content: `
**정의**: 데이터 기밀성과 무결성을 보호하기 위한 암호화 및 복호화.

**핵심 기술**:
• **대칭 키 암호화**: 단일 키 사용(예: AES-256). 빠르고 효율적. NIST SP 800-53(SC-13)
• **비대칭 키 암호화**: 공개/개인 키 쌍(예: RSA). 인증 및 키 교환에 사용
• **해시 함수**: 데이터 무결성 검증(예: SHA-256). NIST SP 800-53(SI-7)
• **디지털 서명**: 데이터 출처 및 무결성 보장(예: RSA 서명)

**예시**: HTTPS(TLS)로 데이터 전송 보호, SQL 인젝션으로 유출된 데이터 암호화

**리스크 연계**: 약한 암호화(예: DES 사용)는 데이터 유출 리스크 증가
          `
        },
        {
          id: 1.3,
          title: "1.3 시스템 보안 엔지니어링",
          content: `
**정의**: 시스템 설계 및 구현에 보안을 통합.

**핵심 요소**:
• **Trusted Computing Base(TCB)**: 시스템 보안을 보장하는 하드웨어·소프트웨어 집합
• **보안 모델**: Bell-LaPadula(기밀성), Biba(무결성)
• **취약점 관리**: 패치 관리 및 취약점 스캔. NIST SP 800-53(SI-2)

**예시**: Log4j 취약점(CVE-2021-44228)을 패치로 완화, TCB 내 보안 모듈 강화

**리스크 연계**: 부적절한 설계로 SQL 인젝션 같은 취약점 악용(High Risk, 21.68억 원 손실)
          `
        },
        {
          id: 1.4,
          title: "1.4 네트워크 보안 아키텍처",
          content: `
**정의**: 네트워크의 보안 설계 및 통제 구현.

**핵심 통제**:
• **DMZ(비무장지대)**: 내부 네트워크와 공개 서버 분리. NIST SP 800-53(SC-7)
• **방화벽**: 트래픽 필터링(예: 상태 기반 방화벽)
• **IDS/IPS**: 침입 탐지 및 방지. NIST SP 800-53(SI-4)
• **네트워크 세그먼테이션**: 공격 확산 방지(예: VLAN)

**예시**: WAF로 SQL 인젝션 탐지, 세그먼테이션으로 WannaCry 확산 방지

**리스크 연계**: 네트워크 설계 결함으로 데이터 유출 리스크 증가
          `
        },
        {
          id: 1.5,
          title: "1.5 클라우드 보안 아키텍처",
          content: `
**정의**: 클라우드 환경에서 보안 설계 및 구현.

**핵심 요소**:
• **가상화 보안**: 하이퍼바이저로 데이터 격리. ISO/IEC 27017
• **API 보안**: 인증 및 인가 강화(예: OAuth)
• **종단 간 암호화**: 데이터 전송 및 저장 보호

**예시**: 클라우드 애플리케이션에서 API 호출에 MFA 적용

**리스크 연계**: 클라우드 설정 오류로 데이터 유출(예: S3 버킷 공개)
          `
        },
        {
          id: 1.6,
          title: "1.6 취약점 관리",
          content: `
**정의**: 시스템 취약점을 식별하고 완화하는 프로세스.

**핵심 프로세스**:
• **취약점 스캔**: 정기 스캔(예: Nessus). NIST SP 800-53(RA-5)
• **패치 관리**: 취약점 패치 적용(예: Log4j 패치). NIST SP 800-53(SI-2)
• **침투 테스트**: 실제 공격 시뮬레이션. NIST SP 800-53(CA-8)

**예시**: SQL 인젝션 취약점(OWASP A03:2021)을 DAST로 탐지, 패치로 완화

**리스크 연계**: 패치 지연으로 리스크 증가(예: WannaCry, CVE-2017-0144)
          `
        }
      ]
    },
    {
      id: 2,
      title: "2. 주요 표준 및 디팩토",
      content: `
• **ISO/IEC 27001(A.11, A.14)**: 물리적 및 시스템 개발 보안
• **ISO/IEC 27017**: 클라우드 보안 통제
• **NIST SP 800-53**: 보안 통제(RA-5, SC-7, SI-2)
• **NIST SP 800-207**: 제로 트러스트 아키텍처
• **OWASP Top 10**: 웹 애플리케이션 취약점(예: A03:2021 Injection)
• **GDPR**: 데이터 보호 요구사항
      `
    },
    {
      id: 3,
      title: "3. 실제 사례",
      content: `
**Equifax(2017)**:
Apache Struts 취약점(CVE-2017-5638)으로 1억 4천만 명 데이터 유출, 약 9천억 원 손실. 패치 관리와 WAF 미적용.

**WannaCry(2017)**:
패치되지 않은 취약점(CVE-2017-0144)으로 글로벌 피해, 네트워크 세그먼테이션 부족.

**Log4j(2021)**:
취약한 종속성(CVE-2021-44228)으로 데이터 유출, 정기 스캔과 패치 미실시.

**SQL 인젝션 예시**:
입력 검증 부족으로 High Risk(0.16 × 135.5억 원 = 21.68억 원 손실).
      `
    },
    {
      id: 4,
      title: "4. 학습 팁",
      content: `
• **리스크 계산 연습**: SQL 인젝션 예시처럼 정성적(High Risk) 및 정량적(21.68억 원) 계산 반복
• **표준 매핑**: ISO/IEC 27001(A.11, A.14)과 NIST SP 800-53 통제를 비교 학습
• **시나리오 분석**: Equifax, WannaCry 사례를 통해 아키텍처 결함과 완화 전략 분석
• **실습**: TLS 설정, WAF 배포, 제로 트러스트 모델 시뮬레이션
      `
    },
    {
      id: 5,
      title: "5. 결론",
      content: `
Domain 3은 보안 아키텍처, 암호화, 취약점 관리로 시스템을 보호하며, 리스크 공식(리스크 = 위협 × 취약점 × 영향)을 적용하여 SQL 인젝션(High Risk, 21.68억 원 손실) 같은 리스크를 평가합니다.

ISO/IEC 27001, NIST SP 800-53 기반으로 WAF, 패치 관리, 제로 트러스트를 구현해야 합니다.
      `
    }
  ]
}