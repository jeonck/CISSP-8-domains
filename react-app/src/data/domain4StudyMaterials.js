export const domain4StudyMaterials = {
  sections: [
    {
      id: 1,
      title: "1. 핵심 개념 정리",
      subsections: [
        {
          id: 1.1,
          title: "1.1 네트워크 보안 아키텍처",
          content: `
**정의**: 네트워크의 보안 설계 및 구현을 통해 무단 접근과 공격을 방지.

**핵심 요소**:
• **DMZ(비무장지대)**: 공개 서버와 내부 네트워크 분리. NIST SP 800-53(SC-7)
• **네트워크 세그먼테이션**: VLAN, 서브넷으로 공격 확산 방지
• **방어 심층(Defense-in-Depth)**: 다중 계층 보안(방화벽, IDS/IPS, WAF)
• **제로 트러스트**: 모든 트래픽 검증(예: MFA, 지속적 모니터링). NIST SP 800-207

**예시**: SQL 인젝션 방지를 위해 WAF 배포, 네트워크 세그먼테이션으로 피해 격리

**리스크 연계**: 부적절한 설계로 데이터 유출(예: Equifax, CVE-2017-5638, 약 9천억 원 손실)
          `
        },
        {
          id: 1.2,
          title: "1.2 보안 프로토콜",
          content: `
**정의**: 데이터 전송의 기밀성과 무결성을 보장하는 프로토콜.

**주요 프로토콜**:
• **TLS/SSL**: HTTPS로 데이터 암호화(예: TLS 1.3). NIST SP 800-53(SC-8)
• **IPsec**: VPN에서 기밀성 및 무결성 제공(예: ESP 모드)
• **SSH**: 안전한 원격 접근
• **DNSSEC**: DNS 데이터 무결성 보장

**예시**: HTTPS로 SQL 인젝션으로 유출된 데이터 보호

**리스크 연계**: 약한 프로토콜(예: SSL 3.0)은 데이터 유출 리스크 증가
          `
        },
        {
          id: 1.3,
          title: "1.3 네트워크 보안 장치",
          content: `
**정의**: 네트워크 트래픽을 제어하고 이상 행동을 탐지/차단.

**핵심 장치**:
• **방화벽**: 상태 기반 또는 차세대 방화벽으로 트래픽 필터링. NIST SP 800-53(SC-7)
• **IDS/IPS**: 침입 탐지(IDS) 및 방지(IPS). NIST SP 800-53(SI-4)
• **WAF(웹 애플리케이션 방화벽)**: 웹 공격(예: SQL 인젝션) 방어. OWASP Top 10

**예시**: WAF로 SQL 인젝션(A03:2021) 탐지, IPS로 WannaCry 차단

**리스크 연계**: 설정 오류로 리스크 증가(예: 방화벽 규칙 미적용)
          `
        },
        {
          id: 1.4,
          title: "1.4 네트워크 공격 및 대응",
          content: `
**정의**: 네트워크 기반 공격 식별 및 완화.

**주요 공격**:
• **DDoS**: 가용성 저해(예: 트래픽 플러딩). NIST SP 800-53(SC-5)
• **SQL 인젝션**: 웹 애플리케이션 취약점(A03:2021)
• **MitM(Man-in-the-Middle)**: 데이터 도청(예: TLS 미적용)

**대응 전략**:
• 트래픽 필터링 및 속도 제한(DDoS 방어)
• WAF 및 입력 검증(SQL 인젝션 방지)
• TLS 및 인증서 검증(MitM 방지)

**예시**: Log4j 취약점(CVE-2021-44228) 탐지를 위해 WAF와 IPS 배포

**리스크 연계**: DDoS로 가용성 손실, SQL 인젝션으로 21.68억 원 손실
          `
        },
        {
          id: 1.5,
          title: "1.5 클라우드 및 SD-WAN 보안",
          content: `
**정의**: 클라우드와 소프트웨어 정의 네트워크(SD-WAN)의 보안 설계.

**핵심 요소**:
• **클라우드 보안**: 가상화(VLAN, 하이퍼바이저), API 보안(OAuth). ISO/IEC 27017
• **SD-WAN**: 트래픽 암호화 및 세그먼테이션. NIST SP 800-53(SC-8)

**예시**: 클라우드 API 호출에 MFA 적용, SD-WAN으로 안전한 지사 연결

**리스크 연계**: 클라우드 설정 오류로 데이터 유출(예: S3 버킷 공개)
          `
        },
        {
          id: 1.6,
          title: "1.6 취약점 관리",
          content: `
**정의**: 네트워크 취약점을 식별하고 완화.

**핵심 프로세스**:
• **취약점 스캔**: 네트워크 스캐너(예: Nessus). NIST SP 800-53(RA-5)
• **패치 관리**: 취약점 패치 적용(예: WannaCry, CVE-2017-0144). NIST SP 800-53(SI-2)
• **침투 테스트**: 네트워크 취약점 시뮬레이션. NIST SP 800-53(CA-8)

**예시**: SQL 인젝션 취약점을 WAF와 패치로 완화

**리스크 연계**: 패치 지연으로 리스크 증가(예: Equifax, CVE-2017-5638)
          `
        }
      ]
    },
    {
      id: 2,
      title: "2. 주요 표준 및 디팩토",
      content: `
• **ISO/IEC 27001(A.13)**: 네트워크 보안 관리
• **ISO/IEC 27017**: 클라우드 네트워크 보안
• **NIST SP 800-53**: 보안 통제(SC-7, SC-8, SI-4)
• **NIST SP 800-207**: 제로 트러스트 아키텍처
• **OWASP Top 10**: 웹 애플리케이션 취약점(예: A03:2021 Injection)
• **GDPR**: 데이터 전송 보호 요구사항
      `
    },
    {
      id: 3,
      title: "3. 실제 사례",
      content: `
**Equifax(2017)**:
Apache Struts 취약점(CVE-2017-5638)으로 1억 4천만 명 데이터 유출, 약 9천억 원 손실. WAF와 패치 관리 부족.

**WannaCry(2017)**:
패치되지 않은 취약점(CVE-2017-0144)으로 글로벌 피해, 네트워크 세그먼테이션 미적용.

**Log4j(2021)**:
취약한 종속성(CVE-2021-44228)으로 데이터 유출, WAF와 IPS 미배포.

**SQL 인젝션 예시**:
입력 검증 부족으로 High Risk(0.16 × 135.5억 원 = 21.68억 원 손실).
      `
    },
    {
      id: 4,
      title: "4. 학습 팁",
      content: `
• **리스크 계산 연습**: SQL 인젝션 예시로 정성적(High Risk) 및 정량적(21.68억 원) 계산 반복
• **표준 매핑**: ISO/IEC 27001(A.13)과 NIST SP 800-53 통제를 비교 학습
• **시나리오 분석**: Equifax, WannaCry 사례를 통해 네트워크 보안 실패와 완화 전략 분석
• **실습**: TLS 설정, WAF 배포, VLAN 구성 시뮬레이션
      `
    },
    {
      id: 5,
      title: "5. 결론",
      content: `
Domain 4는 네트워크 보안 아키텍처, 프로토콜, 장치를 통해 데이터 전송과 네트워크를 보호하며, 리스크 공식(리스크 = 위협 × 취약점 × 영향)을 적용하여 SQL 인젝션(High Risk, 21.68억 원 손실) 같은 리스크를 평가합니다.

ISO/IEC 27001, NIST SP 800-53 기반으로 WAF, TLS, 제로 트러스트를 구현해야 합니다.
      `
    }
  ]
}