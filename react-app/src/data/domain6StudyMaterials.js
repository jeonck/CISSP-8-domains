export const domain6StudyMaterials = {
  sections: [
    {
      id: 1,
      title: "1. 핵심 개념 정리",
      subsections: [
        {
          id: 1.1,
          title: "1.1 보안 평가",
          content: `
**정의**: 보안 통제의 효과성과 규제 준수 여부를 검증하는 프로세스.

**핵심 활동**:
• **취약점 스캔**: 시스템 약점 식별(예: Nessus). NIST SP 800-53(RA-5)
• **침투 테스트**: 실제 공격 시뮬레이션. NIST SP 800-53(CA-8)
• **보안 감사**: 정책 및 규제 준수 확인. ISO/IEC 27001(A.18.2.1)

**예시**: SQL 인젝션 취약점(OWASP A03:2021)을 DAST로 탐지

**리스크 연계**: 미흡한 평가로 취약점 악용(예: Equifax, CVE-2017-5638, 약 9천억 원 손실)
          `
        },
        {
          id: 1.2,
          title: "1.2 취약점 관리",
          content: `
**정의**: 시스템 취약점을 식별, 평가, 완화하는 프로세스.

**핵심 단계**:
• **식별**: 취약점 스캔(예: Nessus, Qualys). NIST SP 800-53(RA-5)
• **평가**: 리스크 공식(리스크 = 위협 × 취약점 × 영향) 적용(예: SQL 인젝션 = High Risk, 21.68억 원)
• **완화**: 패치, 구성 변경, 또는 통제 강화

**예시**: Log4j 취약점(CVE-2021-44228)을 SCA(소프트웨어 구성 분석)로 탐지, 패치 적용

**리스크 연계**: 패치 지연으로 데이터 유출 리스크 증가(예: WannaCry, CVE-2017-0144)
          `
        },
        {
          id: 1.3,
          title: "1.3 테스트 유형",
          content: `
**정의**: 보안 통제와 시스템을 평가하기 위한 다양한 테스트 방법.

**주요 테스트**:
• **정적 코드 분석(SAST)**: 소스 코드 검사(예: SonarQube). OWASP 권장
• **동적 애플리케이션 테스트(DAST)**: 런타임 취약점 테스트(예: OWASP ZAP)

**침투 테스트**:
• **블랙박스**: 내부 구조 미공개
• **화이트박스**: 내부 구조 공개
• **그레이박스**: 부분 정보 제공

• **퍼징(Fuzzing)**: 비정상 입력으로 취약점 테스트

**예시**: SQL 인젝션(A03:2021)을 DAST로 탐지, SAST로 코드 수정

**리스크 연계**: 부적절한 테스트로 취약점 미탐지
          `
        },
        {
          id: 1.4,
          title: "1.4 로그 분석 및 모니터링",
          content: `
**정의**: 보안 사건 탐지와 조사를 위한 로그 수집 및 분석.

**핵심 요소**:
• **SIEM(Security Information and Event Management)**: 실시간 로그 분석(예: Splunk). NIST SP 800-53(AU-6)
• **로그 관리**: 저장, 보호, 분석(예: 무단 접근 탐지)

**예시**: SQL 인젝션 공격 로그를 SIEM으로 분석, 침입 추적

**리스크 연계**: 로그 분석 부족으로 사건 탐지 지연
          `
        },
        {
          id: 1.5,
          title: "1.5 규제 준수 및 감사",
          content: `
**정의**: 보안 평가를 통해 법적·규제적 요구사항 준수 확인.

**주요 규제**:
• **GDPR**: PII 보호, 취약점 스캔 요구
• **PCI DSS**: 결제 데이터 보호를 위한 정기 테스트
• **ISO/IEC 27018**: 클라우드 환경에서 평가 통제

**예시**: GDPR 준수를 위해 정기 취약점 스캔과 감사 수행

**리스크 연계**: 규제 미준수로 벌금(예: GDPR 위반, 2천만 유로)
          `
        },
        {
          id: 1.6,
          title: "1.6 리스크 기반 테스트",
          content: `
**정의**: 리스크 공식을 기반으로 테스트 우선순위를 설정.

**핵심 접근**:
• **High Risk 자산 우선 테스트**(예: SQL 인젝션 관련 시스템)
• **리스크 공식 적용**: 리스크 = 위협 × 취약점 × 영향 (예: 0.16 × 135.5억 원 = 21.68억 원)

**예시**: 고객 데이터베이스에 침투 테스트 우선 수행

**리스크 연계**: 리스크 기반 접근 부족으로 주요 취약점 미탐지
          `
        }
      ]
    },
    {
      id: 2,
      title: "2. 주요 표준 및 디팩토",
      content: `
• **ISO/IEC 27001(A.12.6, A.18.2)**: 취약점 관리 및 감사
• **ISO/IEC 27017/27018**: 클라우드 보안 평가
• **NIST SP 800-53**: 보안 통제(RA-5, CA-8, AU-6)
• **NIST SP 800-61**: 사건 대응과 로그 분석
• **OWASP Top 10**: 웹 애플리케이션 취약점(예: A03:2021 Injection)
• **GDPR/PCI DSS**: 데이터 보호 및 평가 요구사항
      `
    },
    {
      id: 3,
      title: "3. 실제 사례",
      content: `
**Equifax(2017)**:
Apache Struts 취약점(CVE-2017-5638)으로 1억 4천만 명 데이터 유출, 약 9천억 원 손실. 취약점 스캔 및 패치 관리 부족.

**WannaCry(2017)**:
패치되지 않은 취약점(CVE-2017-0144)으로 글로벌 피해, 취약점 스캔 미실시.

**Log4j(2021)**:
취약한 종속성(CVE-2021-44228)으로 데이터 유출, SCA 미적용.

**SQL 인젝션 예시**:
입력 검증 부족으로 High Risk(0.16 × 135.5억 원 = 21.68억 원 손실).
      `
    },
    {
      id: 4,
      title: "4. 학습 팁",
      content: `
• **리스크 계산 연습**: SQL 인젝션 예시로 정성적(High Risk) 및 정량적(21.68억 원) 계산 반복
• **표준 매핑**: ISO/IEC 27001(A.12.6)과 NIST SP 800-53 통제를 비교 학습
• **시나리오 분석**: Equifax, Log4j 사례를 통해 평가 실패와 완화 전략 분석
• **실습**: Nessus로 취약점 스캔, OWASP ZAP으로 DAST, 테이블탑 연습 시뮬레이션
      `
    },
    {
      id: 5,
      title: "5. 결론",
      content: `
Domain 6은 취약점 스캔, 침투 테스트, 로그 분석으로 보안 통제를 검증하며, 리스크 공식(리스크 = 위협 × 취약점 × 영향)을 적용하여 SQL 인젝션(High Risk, 21.68억 원 손실) 같은 리스크를 평가합니다.

ISO/IEC 27001, NIST SP 800-53 기반으로 SAST, DAST, SIEM을 구현해야 합니다.
      `
    }
  ]
}