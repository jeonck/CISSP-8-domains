export const domain5StudyMaterials = {
  sections: [
    {
      id: 1,
      title: "1. 핵심 개념 정리",
      subsections: [
        {
          id: 1.1,
          title: "1.1 신원 관리(Identity Management)",
          content: `
**정의**: 사용자 및 시스템의 신원을 식별하고 관리하는 프로세스.

**핵심 요소**:
• **신원 식별**: 고유 식별자 할당(예: 사용자 ID). ISO/IEC 27001(A.9.2.1)
• **신원 데이터베이스**: 신원 정보 저장 및 관리(예: LDAP, Active Directory)
• **프로비저닝/디프로비저닝**: 계정 생성 및 삭제(예: 퇴사자 계정 비활성화)

**예시**: 신입 직원에게 고유 ID와 권한 부여, 퇴사 시 즉시 계정 삭제

**리스크 연계**: 부적절한 신원 관리로 무단 접근 가능(예: SQL 인젝션으로 관리자 계정 탈취)
          `
        },
        {
          id: 1.2,
          title: "1.2 인증(Authentication)",
          content: `
**정의**: 사용자의 신원을 확인하는 프로세스.

**인증 요소**:
• **Something You Know**: 비밀번호, PIN
• **Something You Have**: 스마트카드, OTP
• **Something You Are**: 생체 인증(지문, 얼굴 인식)

**핵심 기술**:
• **다중 인증(MFA)**: 두 가지 이상 요소 결합(예: 비밀번호 + OTP). NIST SP 800-63B
• **싱글 사인온(SSO)**: 단일 인증으로 다중 시스템 접근(예: SAML, OAuth)

**예시**: MFA로 관리자 계정 보호, SQL 인젝션 후 데이터 유출 방지

**리스크 연계**: 약한 인증(예: 짧은 비밀번호)은 계정 탈취 리스크 증가
          `
        },
        {
          id: 1.3,
          title: "1.3 인가(Authorization)",
          content: `
**정의**: 인증된 사용자에게 자원 접근 권한 부여.

**핵심 모델**:
• **DAC(Discretionary Access Control)**: 소유자가 권한 결정(예: 파일 권한 설정)
• **MAC(Mandatory Access Control)**: 중앙 관리자가 권한 부여(예: 군사 시스템)
• **RBAC(Role-Based Access Control)**: 역할 기반 권한(예: 관리자, 사용자 역할)
• **ABAC(Attribute-Based Access Control)**: 속성 기반 권한(예: 위치, 시간)

**예시**: RBAC로 직원에게 필요한 최소 권한 부여(Least Privilege)

**리스크 연계**: 과도한 권한으로 데이터 유출 리스크 증가(예: Equifax, CVE-2017-5638)
          `
        },
        {
          id: 1.4,
          title: "1.4 접근 제어",
          content: `
**정의**: 자원 접근을 제한하고 관리하는 통제.

**핵심 원칙**:
• **최소 권한(Least Privilege)**: 필요한 최소 권한 부여. ISO/IEC 27001(A.9.1.2)
• **권한 분리(Separation of Duties)**: 권한 분산으로 사기 방지
• **필요에 의한 접근(Need-to-Know)**: 업무 필요 시에만 접근 허용

**예시**: 데이터베이스 관리자에게 읽기 전용 권한 부여, SQL 인젝션 피해 최소화

**리스크 연계**: 부적절한 접근 제어로 데이터 유출(예: Log4j, CVE-2021-44228)
          `
        },
        {
          id: 1.5,
          title: "1.5 세션 관리",
          content: `
**정의**: 사용자 세션의 보안 유지 및 관리.

**핵심 기술**:
• **세션 타임아웃**: 비활성 세션 종료
• **토큰 무효화**: 로그아웃 시 세션 토큰 제거
• **보안 쿠키**: HttpOnly, Secure 플래그 사용

**예시**: 세션 하이재킹 방지를 위해 세션 타임아웃 설정

**리스크 연계**: 세션 관리 실패로 무단 접근(OWASP A07:2021)
          `
        },
        {
          id: 1.6,
          title: "1.6 규제 준수",
          content: `
**정의**: IAM과 관련된 법적·규제적 요구사항 준수.

**주요 규제**:
• **GDPR**: PII 접근에 강력한 인증 및 인가 요구
• **ISO/IEC 27018**: 클라우드 환경에서 IAM 통제
• **PCI DSS**: 결제 데이터 접근 제한

**예시**: GDPR 준수를 위해 PII 접근에 MFA 및 RBAC 적용

**리스크 연계**: 규제 미준수로 벌금 및 평판 손실(예: GDPR 위반, 2천만 유로 벌금)
          `
        }
      ]
    },
    {
      id: 2,
      title: "2. 주요 표준 및 디팩토",
      content: `
• **ISO/IEC 27001(A.9)**: 접근 제어 및 신원 관리
• **ISO/IEC 27017/27018**: 클라우드 IAM 통제
• **NIST SP 800-53**: IAM 통제(IA-2, AC-3)
• **NIST SP 800-63B**: 디지털 인증 가이드라인
• **OWASP Top 10(A07:2021)**: 인증 및 세션 관리 취약점
• **GDPR/PCI DSS**: 데이터 보호 및 접근 제어 요구사항
      `
    },
    {
      id: 3,
      title: "3. 실제 사례",
      content: `
**Equifax(2017)**:
약한 관리자 계정 인증으로 Apache Struts 취약점(CVE-2017-5638) 악용, 1억 4천만 명 데이터 유출, 약 9천억 원 손실.

**Log4j(2021)**:
취약한 인증 및 접근 제어로 CVE-2021-44228 악용, 데이터 유출.

**WannaCry(2017)**:
약한 인증으로 관리자 계정 탈취, 패치 미적용(CVE-2017-0144)으로 피해 확대.

**SQL 인젝션 예시**:
약한 인증으로 관리자 계정 탈취, High Risk(0.16 × 135.5억 원 = 21.68억 원 손실).
      `
    },
    {
      id: 4,
      title: "4. 학습 팁",
      content: `
• **리스크 계산 연습**: SQL 인젝션 예시로 정성적(High Risk) 및 정량적(21.68억 원) 계산 반복
• **표준 매핑**: ISO/IEC 27001(A.9)과 NIST SP 800-53 통제를 비교 학습
• **시나리오 분석**: Equifax, Log4j 사례를 통해 IAM 실패와 완화 전략 분석
• **실습**: MFA 설정, RBAC 구현, SAML 기반 SSO 시뮬레이션
      `
    },
    {
      id: 5,
      title: "5. 결론",
      content: `
Domain 5는 신원 관리, 인증, 인가, 접근 제어를 통해 무단 접근을 방지하며, 리스크 공식(리스크 = 위협 × 취약점 × 영향)을 적용하여 SQL 인젝션(High Risk, 21.68억 원 손실) 같은 리스크를 평가합니다.

ISO/IEC 27001, NIST SP 800-53 기반으로 MFA, RBAC, 세션 관리를 구현해야 합니다.
      `
    }
  ]
}